<?php

/**
 * Invoke hook_permission().
 */
function flashcard_permission() {
  return array(
    'flashcard learn' => array(
      'title' => t('Learn using flashcards'),
      'description' => t('Allow users to use flashcards to learn'),
    ),
    'flashcard import' => array(
      'title' => t('Use import'),
      'description' => t('Allow user to import flashcards from files'),
    ),
    'flashcard admin edit' => array(
      'title' => t('Edit flashcards'),
    ),
    'flashcard admin edit own' => array(
      'title' => t('Edit own cards'),
    ),
  );
}

/**
 * Invoke hook_menu().
 */
function flashcard_menu() {

  $items['flashcard'] = array(
    'title' => 'Flashcards',
    'page callback' => 'flashcard_deck_list',
    'access arguments' => array('flashcard deck view'),
    'weight' => 100,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['flashcard/deck/%flashcard_deck/card-add'] = array(
    'title' => 'Add Card',
    'page callback' => 'flashcard_admin_form_wrapper',
    'page arguments' => array('add', 2),
    'access callback' => 'flashcard_admin_access',
    'access arguments' => array('add', 2),
    'file' => 'flashcard_admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['flashcard/deck/%flashcard_deck/card/%flashcard'] = array(
    'title' => 'Edit',
    'page callback' => 'flashcard_admin_form_wrapper',
    'page arguments' => array('edit', 2, 4),
    'access callback' => 'flashcard_admin_access',
    'access arguments' => array('edit', 4),
    'file' => 'flashcard_admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );


  $items['flashcard/deck/%flashcard_deck/card/%flashcard/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 20,
  );

  $items['flashcard/deck/%flashcard_deck/card/%flashcard/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'flashcard_admin_form_wrapper',
    'page arguments' => array('delete', 2, 4),
    'access callback' => 'flashcard_admin_access',
    'access arguments' => array('delete', 4),
    'file' => 'flashcard_admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );

  $items['flashcard/deck/%flashcard_deck/import'] = array(
    'title' => 'Import',
    'page callback' => 'flashcard_import_form_wrapper',
    'page arguments' => array(2),
    'access arguments' => array('flashcard import'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 120,
  );

  $items['flashcard/deck/%flashcard_deck/sound2sid'] = array(
    'title' => 'Sound2sid',
    'page callback' => 'flashcard_sound2sid',
    'page arguments' => array(2),
    'access arguments' => array('flashcard import'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 120,
  );

  $items['flashcard/deck/%flashcard_deck/import/preview/%'] = array(
    'title' => t('Preview Import'),
    'page callback' => 'flashcard_import_form_wrapper',
    'page arguments' => array(2, 'preview', 5),
    'access arguments' => array('flashcard import'),
  );

  $items['flashcard/deck/%flashcard_deck/list'] = array(
    'title' => 'List cards',
    'page callback' => 'flashcard_list',
    'page arguments' => array(2),
    'access arguments' => array('flashcard learn'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 101,
  );

  $items['flashcard/deck/%flashcard_deck/learn'] = array(
    'title' => 'Learn',
    'page callback' => 'flashcard_learn',
    'page arguments' => array(2),
    'access arguments' => array('flashcard learn'),
    'menu_name' => 'main-menu',
    'weight' => 90,
    'type' => MENU_LOCAL_TASK,
  );

  $items['flashcard/deck/%flashcard_deck/type'] = array(
    'title' => 'Type',
    'page callback' => 'flashcard_learn_typing',
    'page arguments' => array(2),
    'access arguments' => array('flashcard learn'),
    'menu_name' => 'main-menu',
    'weight' => 90,
    'type' => MENU_LOCAL_TASK,
  );

  $items['flashcard/config'] = array(
    'title' => t('Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flashcard_config_form'),
    'access arguments' => array('flashcard learn'),
    //'file' => 'system.inc',
    'menu_name' => 'main-menu',
    'type' => MENU_LOCAL_TASK,
  );

  $items['flashcard/deck/%flashcard_deck/stats'] = array(
    'title' => 'Statistics',
    'desription' => 'A graph showing the learing progress.',
    'page callback' => 'flashcard_progress_chart',
    'page arguments' => array(2),
    'access arguments' => array('flashcard learn'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 350,
  );

  $items['flashcard/toggle/hide/nojs/%'] = array(
    'description' => 'Toggles hidde/show state of the flashcard',
    'page callback' => 'flashcard_toggle_hide',
    'page arguments' => array(3, 4),
    'access arguments' => array('flashcard learn'),
    'type' => MENU_CALLBACK,
  );

  $items['flashcard/toggle/hide/ajax/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['flashcard/toggle/hide/nojs/%'];

  $items['flashcard/toggle/audioreview/nojs/%'] = array(
    'description' => 'Toggles audio review state of the flashcard',
    'page callback' => 'flashcard_toggle_audioreview',
    'page arguments' => array(3, 4),
    'access arguments' => array('flashcard learn'),
    'type' => MENU_CALLBACK,
  );

  $items['flashcard/toggle/audioreview/ajax/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['flashcard/toggle/audioreview/nojs/%'];

  $items['flashcard/toggle/writereview/nojs/%'] = array(
    'description' => 'Toggles write review state of the flashcard',
    'page callback' => 'flashcard_toggle_writereview',
    'page arguments' => array(3, 4),
    'access arguments' => array('flashcard learn'),
    'type' => MENU_CALLBACK,
  );

  $items['flashcard/toggle/writereview/ajax/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['flashcard/toggle/writereview/nojs/%'];

  $items['flashcard/score/nojs/%/%'] = array(
    'page callback' => 'flashcard_set_score',
    'page arguments' => array(2, 3, 4),
    'access arguments' => array('flashcard learn'),
    'type' => MENU_CALLBACK,
  );
  
  $items['flashcard/score/ajax/%/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['flashcard/score/nojs/%/%'];
  {}

  $items['flashcard/delete/recording/nojs/%'] = array(
    'description' => 'Deletes the user specific recording file.',
    'page callback' => 'flashcard_delete_recording',
    'page arguments' => array(3, 4),
    'access arguments' => array('flashcard learn'),
    'type' => MENU_CALLBACK,
  );

  $items['flashcard/delete/recording/ajax/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['flashcard/delete/recording/nojs/%'];

  $items['flashcard/audioupload'] = array(
    'description' => 'Handles recorder on page and uploaded files.',
    'page callback' => 'flashcard_upload_audio',
    'access arguments' => array('flashcard learn'),
  );

  return $items;
}

/**
 * Function flashcard_sound2sid().
 */
function flashcard_sound2sid($deck) {
  if (!$deck) return array();

  $query = db_select('flashcard', 't')
    ->fields('t', array('cid'));

  $max = $query->execute()->rowCount();
  $batch = array(
    'operations' => array(),
    'finished'  => 'flashcard_sound2sid_finished',
    'title' => t('Processing files'),
    'init_message' => t('starting the process'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Import has encountered an error.'),
  );

  $limit = 30;
  $progress = 0;

  while($progress <= $max) {
    $batch['operations'][] = array('flashcard_add_sids', array($progress, $limit));
    $progress += $limit;
  }

  batch_set($batch);
  batch_process('flashcard/deck/' . $deck->did . '/list');
}

/**
 * Function flashcard_add_sids().
 */
function flashcard_add_sids($progress, $limit, &$context) {
  $query = db_select('flashcard', 't')
    ->fields('t', array())
    ->range($progress, $limit);
  $result = $query->execute();

  global $user;

  $cards = $uris = array();
  foreach ($result as $card) {
    if ($card->sid > 0) continue;
    $card->sound_file_path = flashcard_get_audio_path($card);
    $uris[$card->cid] = $card->sound_file_path;
    $cards[$card->cid] = $card;
  }

  if ($cards) {
    $existing_files = array();
    if ($uris) {
      $query = db_select('file_managed', 't')
        ->fields('t', array('fid', 'uri'));
      $query->condition('t.uri', $uris, 'IN');
      $result = $query->execute();
      $existing_files = $result->fetchAllKeyed(0, 1);
    }
    foreach ($cards as $card) {
      $file = new stdClass();
      $file->fid = NULL;
      $file->uri = $card->sound_file_path ;
      $file->filename = drupal_basename($file->uri);
      $file->filemime = file_get_mimetype($file->uri);
      $file->uid = $user->uid;
      $file->status = FILE_STATUS_PERMANENT;

       // If we are replacing an existing file re-use its database record.
      if ($fid = array_search($card->sound_file_path, $existing_files)) {
        $file->fid = $fid;
      }
      else {
        try {
          file_save($file);
        }
        catch (Exception $e) {
          if (!isset($file->fid) || $file->fid <=0) continue;
        } 
      }
      $card->sid = $file->fid;
      flashcard_save($card);
      file_usage_add($file, 'flashcard', 'flashcard', $card->cid);
    }
  }
  $progress += $limit;
  $context['message'] = 'Now processing ' . $progress . ' - ' . $context['results'][0];
}

/**
 * Function flashcard_sound2sid_finished().
 */
function flashcard_sound2sid_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Import is complete');
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }
}

/**
 * Function flashcard_admin_access().
 */
function flashcard_admin_access($mode, $card = NULL, $account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  switch($mode) {
  case 'add':
    return user_access('flashcard admin edit', $account) || user_access('flashcard admin edit own', $account);
    break;
  case 'edit':
  case 'delete':
    return user_access('flashcaed admin edit', $account) ||
      ($card && $card->uid == $account->uid && user_access('flashcard admin edit own', $account));
    break;
  }
  return FALSE;
}

/**
 * Function flashcard_load().
 */
function flashcard_load($cid) {
  $query = db_select('flashcard', 't')
    ->fields('t');
  $query->condition('t.cid', $cid);
  $result = $query->execute();
  if (!$result) return NULL;
  $record = $result->fetchObject();
  if (!$record) return NULL;
  if ($record->iid > 0) {
    $record->image = file_load($record->iid);
  }
  return $record;
}

/**
 * Function flashcard_save().
 */
function flashcard_save($flashcard) {
  $params = isset($flashcard->is_new) && $flashcard->is_new ? array() : 'cid';
  $flashcard->modified = time();
  $result = drupal_write_record('flashcard', $flashcard, $params);
  return $result;
}

/**
 * Function flashcard_delete().
 */
function flashcard_delete($cid) {
  $condition = db_and()->condition('cid', $cid, is_array($cid) ? 'IN' : '=');
  $rez = db_delete('flashcard')->confition($condition);
  $rez = db_delete('flashcard_user_data')->confition($condition);
  return $rez;
}

/**
 * Function flashcard_add_file_usage().
 */
function flashcard_add_file_usage($card, $fieldKey) {
  if (!($card->{$fieldKey} > 0)) return;
  $file = file_load($card->{$fieldKey});
  if (!$file) return;
  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);
  file_usage_add($file, 'flashcard', 'flashcard', $card->cid);
}

/**
 * Function flashcard_delete_file_usage().
 */
function flashcard_delete_file_usage($card, $fieldKey) {
  if (!($card->{$fieldKey} > 0)) return;
  $file = file_load($card->{$fieldKey});
  if (!$file) return;
  file_usage_delete($file, 'flashcard', 'flashcard', $card->cid);
}

/**
 * Function flashcard_set_file_usage().
 */
function flashcard_adjust_file_usage($card, $old_card, $key = 'iid') {
  // load both (if id the case) new and old files:
  if ($old_card->{$key} > 0 && $old_card->{$key} != $card->{$key}) {
    flashcard_delete_file_usage($old_card, $key);
  }

  if ($card->{$key} > 0) {
    flashcard_add_file_usage($card, $key);
  }
}

/**
 * Function flashcard_import_form_wrapper().
 */
function flashcard_import_form_wrapper($deck, $mode = FALSE, $fname) {
  if (!$mode) {
    return drupal_get_form('flashcard_import_form', $deck->did);
  }
  if ($mode == 'preview') {
    return drupal_get_form('flashcard_import_preview_form', $deck->did, $fname);
  }
}

/**
 * Function flashcard_import_form().
 */
function flashcard_import_form($form, $form_state, $did) {

  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('File'),
    '#description' => t('File from which shall import the cards data. File shall contain tab separated records.'),
    '#attributes' => array(
      'accept' => '.txt, .cvs',
    ),
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );
  return $form;
}

/**
 * Function flashcard_import_form_submit().
 */
function flashcard_import_form_submit($form, $form_state) {
  $did = $form_state['build_info']['args'][0];
  $updir = 'public://flashcard/import';
  file_prepare_directory($updir, FILE_CREATE_DIRECTORY);
  $validators = array();
  $file = file_save_upload('file', $validators, FILE_EXISTS_RENAME);
  drupal_goto('flashcard/' . $did . '/import/preview/' . $file->filename);
}

/**
 * Function flashcard_import_preview_form().
 */
function flashcard_import_preview_form($form, $form_state, $did, $fname) {
  $fname = 'temporary://' . $fname;
  $contents = file($fname);
  
  $lines_count = count($contents);
  $max = $lines_count > 10 ? 10 : $lines_count;

  $options = explode("\t", trim($contents[0]));

  for ($i = 1; $i<$max; $i++) {
    $rows[$i] = explode("\t", trim($contents[$i]));
  }
  $form['preview'] = array(
    '#theme' => 'table',
    '#header' => $options,
    '#rows' => $rows,
    '#empty' => t('No data found.'),
  );

  $form['original'] = array(
    '#type' => 'select',
    '#title' => t('Original'),
    '#options' => $options,
    '#default_value' => 0,
  );

  $form['transcription'] = array(
    '#type' => 'select',
    '#title' => t('Transcription'),
    '#options' => $options,
    '#default_value' => 1,
  );

  $form['translation'] = array(
    '#type' => 'select',
    '#title' => t('Translation'),
    '#options' => $options,
    '#default_value' => 2,
  );

  $form['sound'] = array(
    '#type' => 'select',
    '#title' => t('Sound'),
    '#options' => $options,
    '#default_value' => 3,
  );

  $form['firstcol'] = array(
    '#type' => 'checkbox',
    '#title' => t('First column contains titles.'),
    '#default_value' => FALSE,
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );
  return $form;
}

/**
 * Function flashcard_import_preview_submit().
 */
function flashcard_import_preview_submit($form, $form_state) {
  $v = (object) $form_state['values'];
  $v->did = $form_state['build_info']['args'][0];

  $lines = file($fname);
  if (!$lines) {
    $build = array('#markup' => 'Nothing to import from file ' . $fname);
    return $Build;
  }

  if ($v['firstcol']) {
    array_shift($lines);
  }

  $batch = array(
    'operations' => array(),
    'finished' => 'flashcard_process_import_finished',
    'title' => t('Import from file @fname', array('@fname' => basename($fname, '.txt'))),
    'init_message' => t('Import is starting'),
    'process_message' => t('Processed @current out of @total.'),
    'error_message' => t('Import has encountered an error.'),
  );

  $parts = array_chunk($lines, 50);
  $operations_count = count($parts);
  $data = (object) array('struct' => $v);
  foreach($parts as $i => $part) {
    $data->lines = $part;
    $batch['operations'][] = array('flashcard_import_cards', array($date, $i, $operations_count));
  }

  batch_set($batch);
 
}

/**
 * Function flashcard_import_cards().
 */
function flashcard_import_cards($data, $progress, $limit, &$context) {
  $struct = $data->struct;
  foreach($lines->lines as $line) {
    $parts = explode("\t", trim($line));
    $original = $parts[$struct->original];
    $transcript = $parts[$struct->transcript];
    $translation = $parts[$struct->translation];
    $sound = $parts[$struct->soud];
    $soud = preg_replace(array("/^\[/", "/\]$/"), '', $sound);
    $query = db_select('flashcard', 't')
      ->fields('t', array('cid'));
    $query->condition('t.original', $original);
    $result = $query->execute();
    if (!$result->fetchAssoc()) {
      $query = db_insert('flashcard')
        ->fields(array(
          'did' => $struct->did,
          'original' => $original,  
          'transcript' => $transcript,
          'translation' => $translation,
          'sound' => $sound,
        ));
      $query->execute();
    }
  }
  $progress = $progress+$limit;
  $context['message'] = 'Now processings ' . $progress . ' - ' . $context['results'][0] . ' imported';
}

/**
 * Function flashcard_process_import_finished().
 */
function flashcard_process_import_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Import is complete');
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occured while processing %error_operation %error_operation with arguments: @arguments', array(
            '%error_operation' => $error_operation[0],
            '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }
}

/**
 * Function flashcard_create().
 */
function flashcard_create($did) {
  return (object) array(
    'image' => '',
    'original' => '',
    'iid' => '',
    'did' => $did,
    'transcript' => '',
    'translation' => '',
    'sound' => '',
    'is_new' => TRUE,
    'cid' => '',
  );
}

/**
 * Invoke hook_theme().
 */
function flashcard_theme($existing, $type, $theme, $path) {
  return [
    'flashcard_display' => [
      'variables' => [
        'card' => NULL,
        'settings' => NULL,
      ],
      'render element' => 'element',
      'template' => 'flashcard-display',
    ],
    'flashcard_display_write' => [
      'variables' => [
        'card' => NULL,
        'settings' => NULL,
      ],
      'render element' => 'element',
      'template' => 'flashcard-display-write',
    ],
    'flashcard_list' => [
      'variables' => [
        'rows' => array(),
        'recdir' => '',
      ],
      'render element' => 'element',
      'template' => 'flashcard-list',
    ],
    'flashcard_progress' => [
      'variables' => [
        'stats' => (object) array(
          'total_cards' => 0,
          'hiden_cards' => 0,
          'ongoing_cards' => 0,
          'to_audioreview' => 0,
          'to_writereview' => 0,
        ),
      ],
      'render element' => 'element',
      'template' => 'flashcard-progress',
    ],
  ];
}

/**
 * Function flashcard_load_stats().
 */
function flashcard_load_stats($cid) {
  global $user;
  $stats = (object) array(
    'cid' => $cid,
    'uid' => $user->uid,
    'views_count' => 0,
    'hide' => 0,
    'data' => serialize(array()),
  );
  $query = db_select('flashcard_user_data', 't')
    ->fields('t')
    ->condition('t.uid', $user->uid)
    ->condition('t.cid', $cid);
  $result = $query->execute();
  $result = $result->fetchObject();
  if ($result) {
    $stats = $result;
  }
  $stats->data = unserialize($stats->data);
  return $stats;
}

/**
 * Function flashcard_save_stats().
 */
function flashcard_save_stats($stats) {
  global $user;
  $rez = db_select('flashcard_user_data', 't')
    ->fields('t', array('cid'))
    ->condition('cid', $stats->cid)
    ->condition('uid', $user->uid)
    ->execute()->fetchObject();
  if (!drupal_write_record('flashcard_user_data', $stats, $rez ? ['cid', 'uid'] : array())) {
    drupal_set_message(t('Failed to save statistics for flashcard @cid', array('@cid' => $stats->cid)));
  }
}

/**
 * Function flashcard_hide().
 */
function flashcard_hide($cid) {
  $stats = flashcard_load_stats($cid);
  if ($stats) {
    $stats->hide = 1;
    flashcard_save_stats($stats);
  }
}

/**
 * Function flashcard_audio_review().
 */
function flashcard_audio_review($cid) {
  $stats = flashcard_load_stats($cid);
  if ($stats) {
    $stats->audioreview = 1;
    flashcard_save_stats($stats);
  }
}

/**
 * Function flashcard_audio_review().
 */
function flashcard_write_review($cid) {
  $stats = flashcard_load_stats($cid);
  if ($stats) {
    $stats->writereview = 1;
    flashcard_save_stats($stats);
  }
}

/**
 * Function flashcard_user_recording_dir().
 */
function flashcard_user_recording_dir() {
  global $user;
  $recdir = 'public://flashcard/recordings/' . $user->uid; 
  file_prepare_directory($recdir, FILE_CREATE_DIRECTORY);
  return $recdir;
}

/**
 * Function flashcard_user_recording_realpath().
 */
function flashcard_user_recording_realpath() {
  return drupal_realpath(flashcard_user_recording_dir());
}

/**
 * Function flashcard_recording_file().
 */
function flashcard_recording_file($cid) {
  $fname = flashcard_user_recording_realpath() . '/' . $cid . '.mp3';
  return file_exists($fname) ? $fname : 0;
}

/**
 * Function flashcard_recording_url().
 */
function flashcard_recording_url($cid) {
  global $user;
  if (flashcard_recording_file($cid)) {
    return file_create_url('public://flashcard/recordings/' . $user->uid . '/' . $cid . '.mp3');
  }
  return 0;
}

/**
 * Function flashcard_get_audio_path().
 */
function flashcard_get_audio_path($card) {
  $card = (object) $card;
  if (!isset($card->did)) return FALSE;
  $path = flashcard_get_audio_dir($card->did);

  $toReplace = array("/^\[(sound\:)/", "/\]$/");
  if (!$card->sound) {
    if (!$card->cid) return FALSE;
    $card->sound = $card->cid . '.mp3';
  }
  else {
    $card->sound = preg_replace($toReplace, '', trim($card->sound));
  }
  return $path . '/' . $card->sound; 
}

/**
 * Function flashcard_get_audio_url().
 */
function flashcard_get_audio_url($card) {
  return file_create_url(flashcard_get_audio_path($card));
}

/**
 * Function flashcard_get_audio_path().
 */
function flashcard_get_audio_dir($did) {
  $path = 'public://flashcard/audio/' . $did;
  file_prepare_directory($path, FILE_CREATE_DIRECTORY);
  return $path;
}

/**
 * Function flashcard_load_user_card().
 */
function flashcard_load_user_card($cid) {
  global $user;

  $modpath = drupal_get_path('module', 'flashcard');
  drupal_add_js($modpath . '/js/flashcardrec.js');
  drupal_add_css($modpath . '/css/flashcardrec.css');


  $query = db_select('flashcard', 't');
  $query->fields('t');
  $query->leftJoin('flashcard_user_data', 'd', 't.cid = d.cid');
  $query->fields('d');
  $query->condition(db_or()->condition('d.uid', $user->uid)->condition('d.cid', NULL));
  $query->condition('t.cid', $cid);
  $result = $query->execute();
  $card = $result->fetchObject();

  $toReplace = array("/^\[(sound\:)/", "/\]$/");
  $card->sound = flashcard_get_audio_url($card);

  drupal_add_library('system', 'drupal.ajax');
  $card->hide_link = flashcard_get_toggle_hide_link($card->cid, $card->hide);
  $card->audioreview_link = flashcard_get_toggle_audioreview_link($card->cid, $card->audioreview);
  $card->writereview_link = flashcard_get_toggle_writereview_link($card->cid, $card->writereview);

  $recFile = flashcard_user_recording_realpath() . '/' . $card->cid . '.mp3';
  $card->recording = file_exists($recFile) ? $card->cid : 0;
  $card->delete_recording_link = flashcard_get_delete_recording_link($card->cid, $card->recording);

  $card->recdir = file_create_url(flashcard_user_recording_dir());
  $rows = array();

  $card->recording = flashcard_recording_url($cid);

  $card->scores = implode(' ', flashcard_get_score_links($card));

  return $card;
}

/**
 * Function flashcard_learn().
 */
function flashcard_learn($deck, $cid = 0, $cmd = FALSE, $arg = FALSE) {

  if (!$cid) {
    $card = flashcard_load_next_card(0, $deck->did);
    if (!$card) {
      return array('#markup' => t('No flashcards left for learning for given criteria'));
    }
    $cid = $card->cid;
  }

  drupal_set_breadcrumb(array());

  $stats = flashcard_load_stats($cid);
  if ($stats) {
    $stats->views_count++;
    flashcard_save_stats($stats);
  }

  $modpath = drupal_get_path('module', 'flashcard');
  drupal_add_js($modpath . '/js/flashcard.js');
  drupal_add_css($modpath . '/css/flashcard.css');

  $linkParams = array('absolute' => TRUE);
  $card = flashcard_load_user_card($cid);
  $nextCard = flashcard_load_next_card($cid, $card->did);
  $card->next_path = url('flashcard/deck/' . $card->did . '/learn/' . $nextCard->cid, $linkParams);
  $build['flashcard'] = array(
    '#theme' => 'flashcard_display',
    '#card' => $card,
    '#settings' => (object) flashcard_get_user_settings('learning'),
    'nothing' => NULL,
  );

  return $build;
}

/**
 * Function flashcard_learn_typing().
 */
function flashcard_learn_typing($deck, $cid = 0, $cmd = FALSE, $arg = FALSE) {

  if (!$cid) {
    $card = flashcard_load_next_card(0, $deck->did);
    if (!$card) {
      return array('#markup' => t('No flashcards left for learning for given criteria'));
    }
    $cid = $card->cid;
  }

  $modpath = drupal_get_path('module', 'flashcard');
  drupal_add_js($modpath . '/js/flashcard-write.js');
  drupal_add_css($modpath . '/css/flashcard.css');
  drupal_add_css($modpath . '/css/flashcard-write.css');

  $linkParams = array('absolute' => TRUE);
  $card = flashcard_load_user_card($cid);
  $nextCard = flashcard_load_next_card($cid, $card->did);
  $card->next_path = url('flashcard/deck/' . $card->did . '/type/' . $nextCard->cid, $linkParams);
  $build['flashcard'] = array(
    '#theme' => 'flashcard_display_write',
    '#card' => $card,
    '#settings' => (object) flashcard_get_user_settings('learning'),
    'nothing' => NULL,
  );

  return $build;
}

/**
 * Function flashcard_list().
 */
function flashcard_list($deck) {
  $did = $deck->did;

  global $user;

  drupal_add_library('system', 'drupal.ajax');

  $recDir = 'public://flashcard/recordings/' . $user->uid; 
  file_prepare_directory($recDir, FILE_CREATE_DIRECTORY);
  $recPath = file_create_url($recDir);
  $recDir = drupal_realpath($recDir);

  $build = array();
  
  $query = db_select('flashcard', 't')
    ->extend('PagerDefault');
  
  $query->leftJoin('flashcard_user_data', 'd', 't.cid=d.cid');
  $query->leftJoin('file_managed', 'f', 't.iid = f.fid');
  $query->fields('f', array('uri', 'filesize'));

  //$and = db_and()->condition('d.uid', $user->uid);
  //$and->condition('d.hide', 0);
  //$or = db_or()->condition('d.cid', NULL)->condition($and);
  //$query->condition($or);
  $query->fields('t', array());
  $query->fields('d', array('views_count', 'hide', 'audioreview', 'writereview'));
  
  $result = $query
    ->condition('t.did', $did)
    ->limit(30)
    ->orderBy('t.cid')
    ->execute();

  $link_params = array(
    'query' => array(
      'destination' => current_path(),
    ),
  );
  
  $rows = array();
  foreach ($result as $row) {
    $row->hide_link = flashcard_get_toggle_hide_link($row->cid, $row->hide);
    $row->audioreview_link = flashcard_get_toggle_audioreview_link($row->cid, $row->audioreview);
    $row->writereview_link = flashcard_get_toggle_writereview_link($row->cid, $row->writereview);

    $recFile = $recDir . '/' . $row->cid . '.mp3';
    $row->recording = file_exists($recFile) ? $row->cid : 0;
    $row->delete_recording_link = flashcard_get_delete_recording_link($row->cid, $row->recording);
    $row->sound = flashcard_get_audio_url($row);
    $row->image_url = $row->uri ? file_create_url($row->uri) : FALSE;
    if (flashcard_admin_access('edit', $row)) {
      $row->admin_links = array(
        l(t('Edit'), 'flashcard/deck/' . $did . '/card/' . $row->cid . '/edit', $link_params),
        l(t('Delete'), 'flashcard/deck/' . $did . '/card/' . $row->cid . '/delete', $link_params),
      );
    }
    else $row->admin_links = FALSE;
    $rows[$row->cid] = $row;
  }

  $modpath = drupal_get_path('module', 'flashcard');
  
  drupal_add_js($modpath . '/js/flashcard.list.js');
  drupal_add_js($modpath . '/js/flashcardrec.js');
  drupal_add_css($modpath . '/css/flashcard-list.css');
  drupal_add_css($modpath . '/css/flashcardrec.css');

  $build['flashcards_list'] = array(
    '#theme' => 'flashcard_list',
    '#rows' => $rows,
    '#empty' => t('There are no records found in the db'),
    '#recdir' => $recPath,
  );
  
  $build['pager_pager'] = array(
    '#theme' => 'pager',
  );

  return $build;
}

/**
 * Function flashcard_db_settings_condition().
 */
function flashcard_db_settings_condition($set) {
  $set = (object) $set;
  global $user;
  // cards that are not hidden:
  $and = db_and()->condition(db_or()->condition('d.uid', $user->uid)->condition('d.cid', NULL));

  if ($set->play_hidden_cards) {
    $and->condition('d.hide', 1);
  }
  elseif(!$set->play_unseen_cards) {
    $and->condition('d.hide', 0);
  }
  // additional conditions
  $or = db_or();
  if ($set->play_unseen_cards) {
    $or->condition('d.cid', NULL);
    $andA = db_and()->condition('d.audioreview', 0)
      ->condition('d.writereview', 0)
      ->condition('d.hide', 0);
    $or->condition($andA);
  }
  if ($set->play_audioreview) {
    $or->condition('d.audioreview', 1);
  }
  if ($set->play_writereview) {
    $or->condition('d.audioreview', 1);
  }
  if ($or->count()) {
    $and->condition($or);
  }

  if (preg_match("/(\d)\-(\d)/", $set->play_scored, $mt)) {
    if ($set->play_scored != '0-5' && $mt[2] <= 5) {
      $and2 = db_and()->condition('d.score', $mt[1], '>=')
        ->condition('d.score', $mt[2], '<=');
      $and->condition($and2);
    }
  }
  elseif (is_int($set->play_scored)) {
    $and->condition('d.score', $set->play_scored);
  }

  return $and;
}

/**
 * Function _flashcard_load_next_card().
 */
function _flashcard_load_next_card($cid, $did) {
  $set = flashcard_get_user_settings('learning');
  $query = db_select('flashcard', 't');
  $query->fields('t', array('cid'));
  $query->leftJoin('flashcard_user_data', 'd', 't.cid=d.cid');
    // include cards that user never touch before:
  //$or = db_or()->condition('d.cid', NULL)->condition($and);
  $and = flashcard_db_settings_condition($set);
  $query->condition($and);
  $query->condition('t.cid', $cid, '>');
  $query->condition('t.cid', $set->startat, '>=');
  $query->condition('t.did', $did);
  $query->range(0,1);
  $query->orderBy('t.cid');
  $rez = $query->execute();
  return $rez->fetchObject();
}

/**
 * Function flashcard_load_next_card().
 */
function flashcard_load_next_card($cid, $did) {
  $card = _flashcard_load_next_card($cid, $did);
  if (!$card) return _flashcard_load_next_card(0, $did);
  return $card;
}

/**
 * Function flashcard_get_toggle_hide_link().
 */
function flashcard_get_toggle_hide_link($cid, $hide) {
  $query = array(
    'thok' => drupal_get_token('flashcard_toggle_hide' . $cid),
  ) + drupal_get_destination();
  return l('&#128065;', 'flashcard/toggle/hide/nojs/' . $cid, array(
    'query' => $query, 
    'html' => TRUE,
    'attributes' => array(
      'id' => 'flashcard-toggle-hide-link-' . $cid,
      'class' => array('use-ajax flashcard-hide-button', $hide ? 'flashcard-hidden' : 'flashcard-shown'),
    )
  ));
}

/**
 * Function flashcard_get_toggle_audioreview_link().
 */
function flashcard_get_toggle_audioreview_link($cid, $value) {
  $query = array(
    'taok' => drupal_get_token('flashcard_toggle_audioreview' . $cid),
  ) + drupal_get_destination();

  $classes = ['use-ajax', 'flashcard-audioreview-button'];
  if ($value) {
    $classes[] = 'flashcard-audioreview-enabled';
  }
  return l('&#128266;', 'flashcard/toggle/audioreview/nojs/' . $cid, array(
    'query' => $query, 
    'html' => TRUE,
    'attributes' => array(
      'id' => 'flashcard-toggle-audio-link-' . $cid,
      'class' => $classes,
    )
  ));
  
}

/**
 * Function flashcard_get_toggle_writereview_link().
 */
function flashcard_get_toggle_writereview_link($cid, $value) {
  $query = array(
    'twok' => drupal_get_token('flashcard_toggle_writereview' . $cid),
  ) + drupal_get_destination();

  $classes = ['use-ajax', 'flashcard-writereview-button'];
  if ($value) {
    $classes[] = 'flashcard-writereview-enabled';
  }
  return l('&#x270E;', 'flashcard/toggle/writereview/nojs/' . $cid, array(
    'query' => $query, 
    'html' => TRUE,
    'attributes' => array(
      'id' => 'flashcard-toggle-write-link-' . $cid,
      'class' => $classes,
    )
  ));
  
}

/**
 * Function flashcard_toggle_hide().
 */
function flashcard_toggle_hide($ajax, $cid) {

  $is_ajax = $ajax === 'ajax';

  if (empty($_GET['thok']) || !drupal_valid_token($_GET['thok'], 'flashcard_toggle_hide' . $cid)) {
    return MENU_ACCESS_DENIED;
  }

  $stats = flashcard_load_stats($cid);
  $stats->hide = $stats->hide == 1 ? 0 : 1;
  flashcard_save_stats($stats);

  if ($is_ajax) {
    $commands = array();
    $commands[] = ajax_command_invoke('#flashcard-toggle-hide-link-' . $cid,
      'toggleClass', array('flashcard-hidden', $stats->hide));
    //$commands[] = ajax_command_replace('#flashcard-toggle-hide-link-' . $cid,
      //flashcard_get_toggle_hide_link($cid, $stats->hide) . ' repl');
    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
  else {
    $build['message']['#markup'] = 'Card ' . $cid . ($stats->hide ? ' set to hidden' : ' set to shown');
    return $build;
  }
}

/**
 * Function flashcard_toggle_audioreview().
 */
function flashcard_toggle_audioreview($ajax, $cid) {

  $is_ajax = $ajax === 'ajax';

  if (empty($_GET['taok']) || !drupal_valid_token($_GET['taok'], 'flashcard_toggle_audioreview' . $cid)) {
    return MENU_ACCESS_DENIED;
  }

  $stats = flashcard_load_stats($cid);
  $stats->audioreview = $stats->audioreview == 1 ? 0 : 1 ;
  flashcard_save_stats($stats);

  $stats = flashcard_load_stats($cid);

  if ($is_ajax) {
    $commands = array();
    $commands[] = ajax_command_invoke('#flashcard-toggle-audio-link-' . $cid,
      'toggleClass', array('flashcard-audioreview-enabled', $stats->audioreview));
    //$commands[] = ajax_command_replace('#flashcard-toggle-hide-link-' . $cid,
      //flashcard_get_toggle_hide_link($cid, $stats->hide) . ' repl');
    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
  else {
    $build['message']['#markup'] = 'Card ' . $cid . ($stats->audioreview ? ' set to audioreview' : 'un-set from audioreview');
    return $build;
  }
}

/**
 * Function flashcard_toggle_writereview().
 */
function flashcard_toggle_writereview($ajax, $cid) {

  $is_ajax = $ajax === 'ajax';

  if (empty($_GET['twok']) || !drupal_valid_token($_GET['twok'], 'flashcard_toggle_writereview' . $cid)) {
    return MENU_ACCESS_DENIED;
  }

  $stats = flashcard_load_stats($cid);
  $stats->writereview = $stats->writereview == 1 ? 0 : 1;
  flashcard_save_stats($stats);

  if ($is_ajax) {
    $commands = array();
    $commands[] = ajax_command_invoke('#flashcard-toggle-write-link-' . $cid,
      'toggleClass', array('flashcard-writereview-enabled', $stats->writereview));
    //$commands[] = ajax_command_replace('#flashcard-toggle-hide-link-' . $cid,
      //flashcard_get_toggle_hide_link($cid, $stats->hide) . ' repl');
    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
  else {
    $build['message']['#markup'] = 'Card ' . $cid . ($stats->writereview ? ' set to hidden' : ' set to shown');
    return $build;
  }
}

/**
 * Function flashcard_get_delete_recording_link().
 */
function flashcard_get_delete_recording_link($cid, $value) {
  $query = array(
    'tok' => drupal_get_token('flashcard_delete_recording' . $cid),
  ) + drupal_get_destination();

  $classes = ['use-ajax delete'];
  if (!$value) {
    $classes[] = 'recording-hide';
  }
  return l('&Cross;', 'flashcard/delete/recording/nojs/' . $cid, array(
    'query' => $query, 
    'html' => TRUE,
    'attributes' => array(
      'class' => $classes,
    )
  ));
  
}

/**
 * Function flashcard_delete_recording().
 */
function flashcard_delete_recording($ajax, $cid) {

  $is_ajax = $ajax === 'ajax';

  if (empty($_GET['tok']) || !drupal_valid_token($_GET['tok'], 'flashcard_delete_recording' . $cid)) {
    return MENU_ACCESS_DENIED;
  }

  global $user;

  $outdir = 'public://flashcard/recordings/' . $user->uid; 
  file_prepare_directory($outdir, FILE_CREATE_DIRECTORY);
  $outdir = drupal_realpath($outdir);
  $fname = $outdir . '/' . $cid . '.mp3';
  if (file_exists($fname)) {
    unlink($fname);
  }

  if ($is_ajax) {
    $commands = array();
    $commands[] = ajax_command_invoke('.flashcard-' . $cid . ' .play-rec',
      'toggleClass', array('recording-hide', 0));
    $commands[] = ajax_command_invoke('.flashcard-' . $cid . ' .delete',
      'toggleClass', array('recording-hide', 0));
    //$commands[] = ajax_command_replace('#flashcard-toggle-hide-link-' . $cid,
      //flashcard_get_toggle_hide_link($cid, $stats->hide) . ' repl');
    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
  else {
    $build['message']['#markup'] = 'Recording ' . $cid . ' deleted...';
    return $build;
  }
}

/**
 * Function flashcard_upload_audio().
 */
function flashcard_upload_audio() {
  global $user;
  $outdir = 'public://flashcard/recordings/' . $user->uid; 
  file_prepare_directory($outdir, FILE_CREATE_DIRECTORY);
  $outdir = drupal_realpath($outdir);

  $data = print_r($_FILES, true);

  $success = FALSE;
  if (!empty($_FILES) && isset($_FILES['audiofile'])) {
    $f = (object) $_FILES['audiofile'];
    $outFname = $outdir . '/' . $f->name;
    $success = copy($f->tmp_name, $outFname);
    chmod($outFname, 0777);
    $bn = basename($f->name, '.ogg');
    $pathBn = $outdir . '/' . $bn;
    $mp3 = $pathBn . '.mp3';
    $ogg = $pathBn . '.ogg';
    if (file_exists($mp3)) {
      unlink($mp3);
    }
    $options ="-vn -ar 44100 -ac 2 -ab 192k -f mp3";
    $options ="-vn -ar 22050 -ac 2 -ab 45k -f mp3";
    $cmd = 'ffmpeg -i "' . $ogg . '" ' . $options . ' "' . $mp3 . '"';
    `$cmd`;
    unlink($pathBn . '.ogg');
    chmod($mp3, 0777);
  }

  $out = array(
    'success' => $success ? 1 : 0,
  );
  drupal_json_output($out);
}

/**
 * Function flashcard_get_user_settings().
 */
function flashcard_get_user_settings($key = FALSE) {
  global $user;

  $set_key = 'flashcard_' . $user->uid . '_play';
  $set = variable_get($set_key, array());
  $append = array(
    'learning' => array(
      'startat' => 0,
      'autoplay' => FALSE,
      'play_mode' => '1:2:1:1',
      'play_recordings' => 'play_recordings',
      'play_audioreview' => 'play_audioreview',
      'play_writereview' => FALSE,
      'play_unseen_cards' => 'play_unseen_cards',
      'play_hidden_cards' => FALSE,
      'playback_rate' => '1.0',
      'play_scored' => '0-5',
    ),
    'listing' => array(
      'show_writereview' => 'show_writereview',
      'show_audioreview' => 'show_audioreview',
      'show_hidden' => 'show_hidden',
      'show_unseen' => 'show_unseen',
    ),
  );
  foreach($append as $k=>$v) {
    $set[$k] += $v;
  }
  return $key ? (object) $set[$key] : $set;
}

/**
 * Function flashcard_config_form().
 */
function flashcard_config_form($form, $form_state) {
  $set = (array) flashcard_get_user_settings();

  $form['tc'] = array(
    '#type' => 'fieldset',
    '#title' => t('Learning'),
    '#tree' => FALSE,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['tc']['learning'] = array(
    '#type' => 'checkboxes',
    '#options' => array(
      'autoplay' => t('Autoplay'),
      'play_recordings' => t('Play user recorded files as well.'),
      'play_audioreview' => t('Play cards marked for audioreview'),
      'play_writereview' => t('Play cards marked for write review'),
      'play_unseen_cards' => t('Play unseen cards'),
      'play_hidden_cards' => t('Play hidden cards'),
    ),
    '#default_value' => $set['learning'],
  );

  $form['tcadd'] = array('#tree' => TRUE);

  $form['tcadd']['startat'] = array(
    '#title' => t('Start at card ID'),
    '#type' => 'textfield',
    '#size' => 12,
    '#required' => TRUE,
    '#default_value' => $set['learning']['startat'],
    '#autocomplete_path' => FALSE,
  );

  $form['tcadd']['play_scored'] = array(
    '#title' => t('Limit by score'),
    '#type' => 'textfield',
    '#size' => 9,
    '#required' => TRUE,
    '#default_value' => $set['learning']['play_scored'],
    '#autocomplete_path' => FALSE,
    '#description' => t('Use score from 0 to 5. Can provide a single number or a range in form of 0-5.'),
  );

  $options = array(
    '1:2:1:1' => t('Orignal, comment, original twice'),
    '1:2:1' => t('Orignal, comment, original'),
    '1' => t('Original once'),
    '1:1' => t('Original twice'),
    '1:1:1' => t('Original 3 times'),
    '2' => t('Comment only'),
  );

  $form['tcadd']['play_mode'] = array(
    '#type' => 'select',
    '#title' => t('Audio play mode'),
    '#options' => $options,
    '#default_value' => $set['learning']['play_mode'],
    '#description' => t('Select the order of playing audio files for cards.'),
  );

  $options = array(
    '0.5' => '0.5',
    '0.75' => '0.75',
    '1.0' => '1.0',
    '1.25' => '1.25',
    '1.5' => '1.5',
    '1.75' => '1.75',
    '2.0' => '2.0',
  );

  $form['tcadd']['playback_rate'] = array(
    '#type' => 'select',
    '#title' => t('Playback speed'),
    '#options' => $options,
    '#default_value' => $set['learning']['playback_rate'],
  );

  $form['lc'] = array(
    '#type' => 'fieldset',
    '#title' => t('Listing'),
    '#tree' => FALSE,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['lc']['listing'] = array(
    '#type' => 'checkboxes',
    '#options' => array(
      'show_audioreview' => t('Show cards for audioreview'),
      'show_writereview' => t('Show cards for writereview'),
      'show_hidden' => t('Show hidden'),
      'show_unseen' => t('Show unseen'),
    ),
    '#default_value' => $set['listing'],
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Function flashcard_config_form_submit().
 */
function flashcard_config_form_submit($form, &$form_state) {
  global $user;
  $set = flashcard_get_user_settings();
  $v = $form_state['values'];

  $set['listing'] = $v['listing'];
  $set['learning'] = $v['learning'];
  foreach($v['tcadd'] as $k=>$i) {
    $set['learning'][$k] = $i;
  }

  $set_key = 'flashcard_' . $user->uid . '_play';
  variable_set($set_key, $set);
  drupal_set_message(t('Saved successfully.'));
}

/**
 * Function flashcard_progress_chart().
 */
function flashcard_progress_chart($deck) {

  global $user;
  $did = $deck->did;

  $modpath = drupal_get_path('module', 'flashcard');
  drupal_add_css($modpath . '/css/pie.css');

  $stats = new stdClass();
  //count all cards:
  $rez = db_select('flashcard', 't')
    ->fields('t', array('cid'))->condition('t.did', $did)->execute();
  $stats->total_cards = $rez->rowCount();

  $query = db_select('flashcard_user_data', 't');
  $query->leftJoin('flashcard', 'c', 't.cid=c.cid');
  $query->addExpression('SUM(t.hide)', 'hiden_cards');
  $query->addExpression('SUM(t.audioreview * (1-t.hide))', 'to_audioreview');
  $query->addExpression('SUM(t.writereview * (1-t.hide))', 'to_writereview');
  $query->addExpression('SUM(t.writereview * t.audioreview * (1-t.hide))', 'common');
  $query->condition('c.did', $did);

  $rez = $query->execute();
  $r = $rez->fetchObject();
  foreach ($r as $k=>$v) {
    $stats->{$k} = $v;
  }
  $percent = new stdClass();
  foreach($stats as $k=>$v) {
    $percent->$k = sprintf("%.1f", $v * 100 / $stats->total_cards);
  }
  $stats->percent = $percent;
  $build = array(
    '#theme' => 'flashcard_progress',
    '#stats' => $stats,
  );

  return $build;
}

 /**
  * Function flashcard_get_ajax_link().
  */
function flashcard_get_score_links($card) {

   $mod_path = drupal_get_path('module', 'flashcard');
   drupal_add_library('system', 'drupal.ajax');
   drupal_add_css($mod_path . '/css/flashcard-score.css');
 
   $query = array(
     'tok' => drupal_get_token('flashcard_score_' . $card->cid),
   ) + drupal_get_destination();
 
   $classes = ['use-ajax', 'flashcard-score-link-' . $card->cid];
   $links = array();
   for ($i = 0; $i <= 5; $i++) {
     $cls = $classes;
     $cls[] = 'flashcard-score-link-' . $card->cid . '-' . $i;
     if ($card->score == $i) {
       $cls[] = 'flashcard-score-selected';
     }
     $links[$i] = l($i, 'flashcard/score/nojs/' . $card->cid . '/' . $i, array(
       'query' => $query, 
       'attributes' => array(
         'class' => $cls
       )
     ));
   }
   return $links;
}

/**
 * Function flashcard_set_score().
 */
function flashcard_set_score($ajax, $cid, $new_score) {
  global $user;

  $is_ajax = $ajax === 'ajax';

  if (empty($_GET['tok']) || !drupal_valid_token($_GET['tok'], 'flashcard_score_' . $cid, $new_score)) {
    return MENU_ACCESS_DENIED;
  }

  $sate = 0;

  db_update('flashcard_user_data')
    ->fields(array('score' => $new_score))
    ->condition('cid', $cid)
    ->condition('uid', $user->uid)
    ->execute();

  if ($is_ajax) {
    $commands = array();
    $commands[] = ajax_command_invoke('.flashcard-score-link-' . $cid,
      'removeClass', array('flashcard-score-selected'));
    $commands[] = ajax_command_invoke('.flashcard-score-link-' . $cid . '-' . $new_score,
      'addClass', array('flashcard-score-selected'));
    // for more commands see: https://api.drupal.org/api/drupal/includes%21ajax.inc/group/ajax_commands/7.x
    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
  else {
    $build['message']['#markup'] = t('Successfully processed @cid, $new_score', array('@cid, $new_score' => $cid, $new_score));
    return $build;
  }
}
